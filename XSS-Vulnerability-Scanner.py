import requests
from xss_payloads import xss_payloads

def scan_xss_vulnerability(url, params=None):
    for payload in xss_payloads.default_payloads:
        if params:
            for param in params:
                modified_url = url.replace(param, param + payload)
                response = requests.get(modified_url)
                if payload in response.text:
                    return True, param
        else:
            response = requests.get(url)
            if payload in response.text:
                return True, "URL"

    return False, None

def save_vulnerability_report(url, vulnerable_param):
    with open("vulnerability_report.txt", "a") as file:
        file.write(f"URL: {url}\n")
        if vulnerable_param:
            file.write(f"Vulnerable Parameter: {vulnerable_param}\n")
        file.write("\n")

def main():
    url = input("Please enter the URL to scan: ")
    params_input = input("Please enter parameters for scanning (separated by commas, leave empty if none): ")
    
    if url.startswith("http://") or url.startswith("https://"):
        params = [param.strip() for param in params_input.split(",")] if params_input else None
        vulnerable, vulnerable_param = scan_xss_vulnerability(url, params)

        if vulnerable:
            print("XSS Vulnerability Found.")
            save_vulnerability_report(url, vulnerable_param)
        else:
            print("No XSS Vulnerability Found.")
    else:
        print("Invalid URL. URL should start with 'http://' or 'https://'.")

if __name__ == "__main__":
    main()
